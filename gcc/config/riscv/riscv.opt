; Options for the RISC-V port of the compiler
;
; Copyright (C) 2011-2020 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/riscv/riscv-opts.h

mbranch-cost=
Target RejectNegative Joined UInteger Var(riscv_branch_cost)
-mbranch-cost=N	Set the cost of branches to roughly N instructions.

mplt
Target Report Var(TARGET_PLT) Init(1)
When generating -fpic code, allow the use of PLTs. Ignored for fno-pic.

mabi=
Target Report RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32) Negative(mabi=)
Specify integer and floating-point calling convention.

mpreferred-stack-boundary=
Target RejectNegative Joined UInteger Var(riscv_preferred_stack_boundary_arg)
Attempt to keep stack aligned to this power of 2.

Enum
Name(abi_type) Type(enum riscv_abi_type)
Supported ABIs (for use with the -mabi= option):

EnumValue
Enum(abi_type) String(ilp32) Value(ABI_ILP32)

EnumValue
Enum(abi_type) String(ilp32e) Value(ABI_ILP32E)

EnumValue
Enum(abi_type) String(ilp32f) Value(ABI_ILP32F)

EnumValue
Enum(abi_type) String(ilp32d) Value(ABI_ILP32D)

EnumValue
Enum(abi_type) String(lp64) Value(ABI_LP64)

EnumValue
Enum(abi_type) String(lp64f) Value(ABI_LP64F)

EnumValue
Enum(abi_type) String(lp64d) Value(ABI_LP64D)

mfdiv
Target Report Mask(FDIV)
Use hardware floating-point divide and square root instructions.

mdiv
Target Report Mask(DIV)
Use hardware instructions for integer division.

march=
Target Report RejectNegative Joined Negative(march=)
-march=	Generate code for given RISC-V ISA (e.g. RV64IM).  ISA strings must be
lower-case.

mtune=
Target RejectNegative Joined Var(riscv_tune_string)
-mtune=PROCESSOR	Optimize the output for PROCESSOR.

mcpu=
Target RejectNegative Joined Alias(mtune=)
-mcpu=PROCESSOR        Optimize the output for PROCESSOR.

msmall-data-limit=
Target Joined Separate UInteger Var(g_switch_value) Init(8)
-msmall-data-limit=N	Put global and static data smaller than <number> bytes into a special section (on some targets).

msave-restore
Target Report Mask(SAVE_RESTORE)
Use smaller but slower prologue and epilogue code.

mshorten-memrefs
Target Bool Var(riscv_mshorten_memrefs) Init(1)
Convert BASE + LARGE_OFFSET addresses to NEW_BASE + SMALL_OFFSET to allow more
memory accesses to be generated as compressed instructions.  Currently targets
32-bit integer load/stores.

mriscv-iprintf
Target Bool Var(riscv_iprintf) Init(-1)
Enable replace printf with iprintf if available.

mcmodel=
Target Report RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)
Specify the code model.

mstrict-align
Target Report Mask(STRICT_ALIGN) Save
Do not generate unaligned memory accesses.

Enum
Name(code_model) Type(enum riscv_code_model)
Known code models (for use with the -mcmodel= option):

EnumValue
Enum(code_model) String(medlow) Value(CM_MEDLOW)

EnumValue
Enum(code_model) String(medany) Value(CM_MEDANY)

; Compatible for nds32 toolchain
EnumValue
Enum(code_model) String(small) Value(CM_MEDLOW)

EnumValue
Enum(code_model) String(medium) Value(CM_MEDANY)

EnumValue
Enum(code_model) String(large) Value(CM_LARGE)

mexplicit-relocs
Target Report Mask(EXPLICIT_RELOCS)
Use %reloc() operators, rather than assembly macros, to load addresses.

mrelax
Target Bool Var(riscv_mrelax) Init(1)
Take advantage of linker relaxations to reduce the number of instructions
required to materialize symbol addresses.

Mask(64BIT)

Mask(MUL)

matomic
Target Report Mask(ATOMIC)
Use atomic extension instructions.

mbfo
Target Report Mask(BFO) Undocumented
Use hardware instructions for bitfields extract: bfos, bfoz.

mbbcs
Target Report Mask(BBCS) Undocumented
Use hardware instructions for bit testing branch: bbc, bbs.

mbimm
Target Report Mask(BIMM) Undocumented
Use hardware instructions: beqc, bnec.

mlea
Target Report Mask(LEA) Undocumented
Use hardware load effective address instructions: lea.

mzfh
Target Report Mask(ZFH)
Support Zfh half-precision floating-point extension

Mask(ZFH)

Mask(V5)

mext-dsp
Target Report Mask(DSP)
Use hardware DSP instructions.

mb20282
Target Report Undocumented
Avoid conditional jump erratum

mb22827
Target Report Undocumented
Insert a fclass.x after FDIV.x/FSQRT.x conditionally

mb22827.1
Target Report Undocumented
Insert a NOP after FSHW conditionally

mext-vector
Target Report Mask(RVV)
Use vector instructions.

Mask(HARD_FLOAT)

Mask(DOUBLE_FLOAT)

Mask(RVC)

Mask(RVE)

Os1
Target
Optimize for size level 1. This option will disable execit optimization to prevent performance drop.

Os2
Target
Optimize for size level 2. This option will disable execit optimization for innermost loop to prevent performance drop.

Os3
Target
Optimize for size level 3 which mean don't care performance.

mvh
Target Report Var(riscv_virtual_hosting)
Enable Virtual Hosting support.

mconfig-mul=
Target RejectNegative Joined Enum(riscv_mul_type) Var(riscv_mul_config) Init(MUL_TYPE_AUTO)
Specify configuration of instruction mul.

Enum
Name(riscv_mul_type) Type(enum riscv_mul_type)

EnumValue
Enum(riscv_mul_type) String(auto) Value(MUL_TYPE_AUTO)

EnumValue
Enum(riscv_mul_type) String(fast) Value(MUL_TYPE_FAST)

EnumValue
Enum(riscv_mul_type) String(fast1) Value(MUL_TYPE_FAST)

EnumValue
Enum(riscv_mul_type) String(fast2) Value(MUL_TYPE_FAST)

EnumValue
Enum(riscv_mul_type) String(slow) Value(MUL_TYPE_SLOW)

mmove-bytes-per-loop=
Target RejectNegative Joined UInteger Var(riscv_movebytes_per_loop) Init(0)
-mmove-bytes-per-loop=N Set <N> bytes of data movement can be handled per loop iteration.

malways-align
Target Mask(ALWAYS_ALIGN)
Always align function entry, jump target and return address.

mriscv-attribute
Target Report Var(riscv_emit_attribute_p) Init(-1)
Emit RISC-V ELF attribute.

malign-data=
Target RejectNegative Joined Var(riscv_align_data_type) Enum(riscv_align_data) Init(riscv_align_data_type_xlen)
Use the given data alignment.

Enum
Name(riscv_align_data) Type(enum riscv_align_data)
Known data alignment choices (for use with the -malign-data= option):

EnumValue
Enum(riscv_align_data) String(xlen) Value(riscv_align_data_type_xlen)

EnumValue
Enum(riscv_align_data) String(natural) Value(riscv_align_data_type_natural)

mict-model=
Target Report RejectNegative Joined Enum(ict_model) Var(riscv_ict_model) Init(ICT_MODEL_SMALL)
Specify the address generation strategy for ICT call's code model.

Enum
Name(ict_model) Type(enum riscv_ict_model_type)
Known ict model types (for use with the -mict-model= option):

EnumValue
Enum(ict_model) String(tiny) Value(ICT_MODEL_TINY)

EnumValue
Enum(ict_model) String(small) Value(ICT_MODEL_SMALL)

EnumValue
Enum(ict_model) String(large) Value(ICT_MODEL_LARGE)

; ---------------------------------------------------------------
; The following options are designed for compatibility issue.
; Hopefully these obsolete options will be removed one day.

mace
Target RejectNegative
Compile with Andes ACE.

mace-s2s=
Target Joined RejectNegative
Argument for pass to Andes's ACE source-to-source translator.


; ---------------------------------------------------------------

mctor-dtor
Target Report
Enable constructor/destructor feature.

mno-16-bit
Target Report RejectNegative
Do not genearte C extension instructions.

mexecit
Target Report Var(TARGET_EXECIT)
Use special directives to guide linker doing execit optimization.

mex9
Target Report Undocumented
Use special directives to guide linker doing execit optimization.

minnermost-loop
Target Report Mask(INNERMOST_LOOP)
Insert the innermost loop directive.

mgp-insn-relax
Target Report
Use special directives to guide linker doing gp insn relax optimization.

mrestrict-even-reg-for-regpair
Target Report Mask(RESTRICT_EVEN_REG_FOR_REGPAIR)
Restrict register pair must start with even register number.

mfma
Target Report Var(TARGET_FMA) Init(1)
Generating fma instructions.

mext-fpu-fma
Target Report Undocumented
Generating fma instructions.

mfp16
Target Report Mask(FP16) Undocumented
Supporting __fp16 instructions.

msoft-fp16
Target Report Mask(SOFT_FP16) Undocumented

mbf16
Target Report Mask(BF16)
Support Andes BFLOAT16 Conversion Extension

mcmov
Target Mask(CMOV)

mpool-section
Target Report Var(TARGET_POOL_SECTION) Init(0)
Seprate constant pool from text section in large code model.

mno-workaround
Target Report RejectNegative Undocumented
Do not use workaroud solution.

mno-execit-jal
Target Report RejectNegative Undocumented
Not use execit for jal.

mext-zbabcs
Target Report Mask(ZBABCS)
Use RVB hardware instructions including Zba, Zbb, Zbc, Zbs.

TargetVariable
int riscv_zb_subext

mext-zk
Target Report RejectNegative Mask(ZK)
Enable standard scalar cryptography extension.

mext-zkn
Target Report RejectNegative Mask(ZKN)
Enable NIST Algorithm Suite.

mext-zks
Target Report RejectNegative Mask(ZKS)
Enable ShangMi Algorithm Suite.

TargetVariable
int riscv_zk_subext

mext-cbo
Target Report Mask(ZICBOMZP)
Use CMO hardware instructions including Zicbom, Zicboz, Zicbop.

TargetVariable
int riscv_zicmo_subext