; Options for the RISC-V port of the compiler
;
; Copyright (C) 2011-2022 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/riscv/riscv-opts.h

mbig-endian
Target RejectNegative Mask(BIG_ENDIAN)
Assume target CPU is configured as big endian.

mlittle-endian
Target RejectNegative InverseMask(BIG_ENDIAN)
Assume target CPU is configured as little endian.

mbranch-cost=
Target RejectNegative Joined UInteger Var(riscv_branch_cost)
-mbranch-cost=N	Set the cost of branches to roughly N instructions.

mplt
Target Var(TARGET_PLT) Init(1)
When generating -fpic code, allow the use of PLTs. Ignored for fno-pic.

mabi=
Target RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32) Negative(mabi=)
Specify integer and floating-point calling convention.

mpreferred-stack-boundary=
Target RejectNegative Joined UInteger Var(riscv_preferred_stack_boundary_arg)
Attempt to keep stack aligned to this power of 2.

Enum
Name(abi_type) Type(enum riscv_abi_type)
Supported ABIs (for use with the -mabi= option):

EnumValue
Enum(abi_type) String(ilp32) Value(ABI_ILP32)

EnumValue
Enum(abi_type) String(ilp32e) Value(ABI_ILP32E)

EnumValue
Enum(abi_type) String(ilp32f) Value(ABI_ILP32F)

EnumValue
Enum(abi_type) String(ilp32d) Value(ABI_ILP32D)

EnumValue
Enum(abi_type) String(lp64) Value(ABI_LP64)

EnumValue
Enum(abi_type) String(lp64f) Value(ABI_LP64F)

EnumValue
Enum(abi_type) String(lp64d) Value(ABI_LP64D)

mfdiv
Target Mask(FDIV)
Use hardware floating-point divide and square root instructions.

mdiv
Target Mask(DIV)
Use hardware instructions for integer division.

march=
Target RejectNegative Joined Negative(march=)
-march=	Generate code for given RISC-V ISA (e.g. RV64IM).  ISA strings must be
lower-case.

mtune=
Target RejectNegative Joined Var(riscv_tune_string)
-mtune=PROCESSOR	Optimize the output for PROCESSOR.

mcpu=
Target RejectNegative Joined Var(riscv_cpu_string)
-mcpu=PROCESSOR	Use architecture of and optimize the output for PROCESSOR.

msmall-data-limit=
Target Joined Separate UInteger Var(g_switch_value) Init(8)
-msmall-data-limit=N	Put global and static data smaller than <number> bytes into a special section (on some targets).

msave-restore
Target Mask(SAVE_RESTORE)
Use smaller but slower prologue and epilogue code.

mshorten-memrefs
Target Bool Var(riscv_mshorten_memrefs) Init(1)
Convert BASE + LARGE_OFFSET addresses to NEW_BASE + SMALL_OFFSET to allow more
memory accesses to be generated as compressed instructions.  Currently targets
32-bit integer load/stores.

mriscv-iprintf
Target Bool Var(riscv_iprintf) Init(-1)
Enable replace printf with iprintf if available.

mcmodel=
Target RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)
Specify the code model.

mstrict-align
Target Mask(STRICT_ALIGN) Save
Do not generate unaligned memory accesses.

Enum
Name(code_model) Type(enum riscv_code_model)
Known code models (for use with the -mcmodel= option):

EnumValue
Enum(code_model) String(medlow) Value(CM_MEDLOW)

EnumValue
Enum(code_model) String(medany) Value(CM_MEDANY)

; Compatible for nds32 toolchain
EnumValue
Enum(code_model) String(small) Value(CM_MEDLOW)

EnumValue
Enum(code_model) String(medium) Value(CM_MEDANY)

EnumValue
Enum(code_model) String(large) Value(CM_LARGE)

mexplicit-relocs
Target Mask(EXPLICIT_RELOCS)
Use %reloc() operators, rather than assembly macros, to load addresses.

mrelax
Target Bool Var(riscv_mrelax) Init(1)
Take advantage of linker relaxations to reduce the number of instructions
required to materialize symbol addresses.

Mask(64BIT)

Mask(MUL)

matomic
Target Mask(ATOMIC)
Use atomic extension instructions.

mbfo
Target Mask(BFO) Undocumented
Use hardware instructions for bitfields extract: bfos, bfoz.

mbbcs
Target Mask(BBCS) Undocumented
Use hardware instructions for bit testing branch: bbc, bbs.

mbimm
Target Mask(BIMM) Undocumented
Use hardware instructions: beqc, bnec.

mlea
Target Mask(LEA) Undocumented
Use hardware load effective address instructions: lea.

Mask(V5)

mext-dsp
Target Mask(DSP)
Use hardware DSP instructions.

mb20282
Target Undocumented
Avoid conditional jump erratum

mb22827
Target Undocumented
Insert a fclass.x after FDIV.x/FSQRT.x conditionally

mb22827.1
Target Undocumented
Insert a NOP after FSHW conditionally

mb19758
Target Undocumented
Avoid the bid return non-seqution

mb25057
Target Undocumented
Avoid load hits store buffer may get stale data

Mask(HARD_FLOAT)

Mask(DOUBLE_FLOAT)

Mask(RVC)

Mask(RVE)

Mask(VECTOR)

mext-vector
Target RejectNegative
Enable RISC-V vector extension.

Enum
Name(mext_vector_opt) Type(enum riscv_zve)
Supported Embedded vector extensions (for use with the -mext-vector= option):

EnumValue
Enum(mext_vector_opt) String(zve32x) Value(ZVE32X)

EnumValue
Enum(mext_vector_opt) String(zve32f) Value(ZVE32F)

EnumValue
Enum(mext_vector_opt) String(zve64x) Value(ZVE64X)

EnumValue
Enum(mext_vector_opt) String(zve64f) Value(ZVE64F)

EnumValue
Enum(mext_vector_opt) String(zve64d) Value(ZVE64D)

mext-vector=
Target Joined RejectNegative Enum(mext_vector_opt) Var(zve_arg) Init(ZVE32X)
Enable RISC-V vector extensions for embedded processors. Permissible values for this option are: 'zve32x', 'zve32f', 'zve64x', 'zve64f', and 'zve64d'.

mzfh
Target
Use Zfh extension instructions.

mno-zvfh
Target RejectNegative
Disable zvfh support

mbf16
Target
Support Andes BFLOAT16 Conversion Extension

mext-bf16min
Target
Support RISC-V minimal BFloat16 extension(Zfbfmin, Zvfbfmin, and Zvfbfwma)

Os1
Target
Optimize for size level 1. This option will disable execit optimization to prevent performance drop.

Os2
Target
Optimize for size level 2. This option will disable execit optimization for innermost loop to prevent performance drop.

Os3
Target
Optimize for size level 3 which mean don't care performance.

mvh
Target Var(riscv_virtual_hosting)
Enable Virtual Hosting support.

mconfig-mul=
Target RejectNegative Joined Enum(riscv_mul_type) Var(riscv_mul_config) Init(MUL_TYPE_AUTO)
Specify configuration of instruction mul.

Enum
Name(riscv_mul_type) Type(enum riscv_mul_type)

EnumValue
Enum(riscv_mul_type) String(auto) Value(MUL_TYPE_AUTO)

EnumValue
Enum(riscv_mul_type) String(fast) Value(MUL_TYPE_FAST)

EnumValue
Enum(riscv_mul_type) String(fast1) Value(MUL_TYPE_FAST)

EnumValue
Enum(riscv_mul_type) String(fast2) Value(MUL_TYPE_FAST)

EnumValue
Enum(riscv_mul_type) String(slow) Value(MUL_TYPE_SLOW)

mmove-bytes-per-loop=
Target RejectNegative Joined UInteger Var(riscv_movebytes_per_loop) Init(0)
-mmove-bytes-per-loop=N Set <N> bytes of data movement can be handled per loop iteration.

malways-align
Target Mask(ALWAYS_ALIGN)
Always align function entry, jump target and return address.

Mask(FULL_V)

mriscv-attribute
Target Var(riscv_emit_attribute_p) Init(-1)
Emit RISC-V ELF attribute.

malign-data=
Target RejectNegative Joined Var(riscv_align_data_type) Enum(riscv_align_data) Init(riscv_align_data_type_xlen)
Use the given data alignment.

Enum
Name(riscv_align_data) Type(enum riscv_align_data)
Known data alignment choices (for use with the -malign-data= option):

EnumValue
Enum(riscv_align_data) String(xlen) Value(riscv_align_data_type_xlen)

EnumValue
Enum(riscv_align_data) String(natural) Value(riscv_align_data_type_natural)

mstack-protector-guard=
Target RejectNegative Joined Enum(stack_protector_guard) Var(riscv_stack_protector_guard) Init(SSP_GLOBAL)
Use given stack-protector guard.

Enum
Name(stack_protector_guard) Type(enum stack_protector_guard)
Valid arguments to -mstack-protector-guard=:

EnumValue
Enum(stack_protector_guard) String(tls) Value(SSP_TLS)

EnumValue
Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)

mstack-protector-guard-reg=
Target RejectNegative Joined Var(riscv_stack_protector_guard_reg_str)
Use the given base register for addressing the stack-protector guard.

TargetVariable
int riscv_stack_protector_guard_reg = 0

mstack-protector-guard-offset=
Target RejectNegative Joined Integer Var(riscv_stack_protector_guard_offset_str)
Use the given offset for addressing the stack-protector guard.

TargetVariable
long riscv_stack_protector_guard_offset = 0

mext-zbabcs
Target Mask(ZBABCS)
Use RVB hardware instructions including Zba, Zbb, Zbc, Zbs.

TargetVariable
int riscv_zi_subext

TargetVariable
int riscv_zb_subext

mext-zc
Target Var(ZC)
Enable Code Size Reduction extensions.

mno-zcmp
Target RejectNegative Undocumented
Disable Zcmp extension.

mno-zcmt
Target RejectNegative Undocumented
Disable Zcmt extension.

TargetVariable
int riscv_zc_subext

mext-zkn
Target RejectNegative Var(TARGET_FLAG_ZKN)
Enable NIST Algorithm Suite.

mext-zks
Target RejectNegative Var(TARGET_FLAG_ZKS)
Enable ShangMi Algorithm Suite.

mext-zkns
Target Mask(ZKNS)
Enable NIST Algorithm Suite and ShangMi Algorithm Suite.

TargetVariable
int riscv_zk_subext

TargetVariable
int riscv_vector_elen_flags

TargetVariable
int riscv_zvl_flags

mnexecitop
Target Undocumented
Use next execit optimization.

mext-cmo
Target Mask(ZICBOMZP)
Use CMO hardware instructions including Zicbom, Zicboz, Zicbop.

TargetVariable
int riscv_zvb_subext

TargetVariable
int riscv_zvk_subext

TargetVariable
int riscv_zicmo_subext

TargetVariable
int riscv_zf_subext

mext-svinval
Target Var(SVINVAL)
Enable fine-grained address-translation cache invalidation instructions

TargetVariable
int riscv_sv_subext

Enum
Name(isa_spec_class) Type(enum riscv_isa_spec_class)
Supported ISA specs (for use with the -misa-spec= option):

EnumValue
Enum(isa_spec_class) String(2.2) Value(ISA_SPEC_CLASS_2P2)

EnumValue
Enum(isa_spec_class) String(20190608) Value(ISA_SPEC_CLASS_20190608)

EnumValue
Enum(isa_spec_class) String(20191213) Value(ISA_SPEC_CLASS_20191213)

misa-spec=
Target RejectNegative Joined Enum(isa_spec_class) Var(riscv_isa_spec) Init(TARGET_DEFAULT_ISA_SPEC)
Set the version of RISC-V ISA spec.

mict-model=
Target RejectNegative Joined Enum(ict_model) Var(riscv_ict_model) Init(ICT_MODEL_SMALL)
Specify the address generation strategy for ICT call's code model.

Enum
Name(ict_model) Type(enum riscv_ict_model_type)
Known ict model types (for use with the -mict-model= option):

EnumValue
Enum(ict_model) String(tiny) Value(ICT_MODEL_TINY)

EnumValue
Enum(ict_model) String(small) Value(ICT_MODEL_SMALL)

EnumValue
Enum(ict_model) String(large) Value(ICT_MODEL_LARGE)

; ---------------------------------------------------------------
; The following options are designed for compatibility issue.
; Hopefully these obsolete options will be removed one day.

mace
Target RejectNegative
Compile with Andes ACE.

mace-s2s=
Target Joined RejectNegative
Argument for pass to Andes's ACE source-to-source translator.

; ---------------------------------------------------------------

mctor-dtor
Target
Enable constructor/destructor feature.

minnermost-loop
Target Mask(INNERMOST_LOOP)
Insert the innermost loop directive.

mno-16-bit
Target RejectNegative Var(TARGET_NO_16_BIT)
Do not genearte C extension instructions.

mexecit
Target Var(TARGET_EXECIT)
Use special directives to guide linker doing execit optimization.

mex9
Target Undocumented
Use special directives to guide linker doing execit optimization.

mgp-insn-relax
Target
Use special directives to guide linker doing gp insn relax optimization.

mrestrict-even-reg-for-regpair
Target Mask(RESTRICT_EVEN_REG_FOR_REGPAIR)
Restrict register pair must start with even register number.

mfma
Target Var(TARGET_FMA) Init(1)
Generating fma instructions.

mext-fpu-fma
Target Undocumented
Generating fma instructions.

mcmov
Target Mask(CMOV)

mpool-section
Target Var(TARGET_POOL_SECTION) Init(0)
Seprate constant pool from text section in large code model.

mno-workaround
Target RejectNegative Undocumented
Do not use workaroud solution.

mno-execit-jal
Target RejectNegative Undocumented
Not use execit for jal.

minline-atomics
Target Var(TARGET_INLINE_SUBWORD_ATOMIC) Init(1)
Always inline subword atomic operations.

Enum
Name(riscv_autovec_preference) Type(enum riscv_autovec_preference_enum)
The RISC-V auto-vectorization preference:

EnumValue
Enum(riscv_autovec_preference) String(none) Value(NO_AUTOVEC)

EnumValue
Enum(riscv_autovec_preference) String(scalable) Value(RVV_SCALABLE)

EnumValue
Enum(riscv_autovec_preference) String(fixed-vlmax) Value(RVV_FIXED_VLMAX)

-param=riscv-autovec-preference=
Target RejectNegative Joined Enum(riscv_autovec_preference) Var(riscv_autovec_preference) Init(NO_AUTOVEC)
-param=riscv-autovec-preference=<string>	Set the preference of auto-vectorization in the RISC-V port.

Enum
Name(riscv_autovec_lmul) Type(enum riscv_autovec_lmul_enum)
The RVV possible LMUL:

EnumValue
Enum(riscv_autovec_lmul) String(m1) Value(RVV_M1)

EnumValue
Enum(riscv_autovec_lmul) String(m2) Value(RVV_M2)

EnumValue
Enum(riscv_autovec_lmul) String(m4) Value(RVV_M4)

EnumValue
Enum(riscv_autovec_lmul) String(m8) Value(RVV_M8)

-param=riscv-autovec-lmul=
Target RejectNegative Joined Enum(riscv_autovec_lmul) Var(riscv_autovec_lmul) Init(RVV_M1)
-param=riscv-autovec-lmul=<string>	Set the RVV LMUL of auto-vectorization in the RISC-V port.

TargetVariable
int riscv_xnds_subext

mext-zvlsseg
Target Var(TARGET_ZVLSSEG) Init(0)
Enable RISC-V vector zvlsseg extension.
